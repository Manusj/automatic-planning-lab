(defdomain domain (

  (:operator (!pickup-crate ?heli ?cratetype ?loc)
  ;; Precondition
  (and (at ?heli ?loc)
       (at ?crate ?loc) ;; helicopter and crate must be in same location for task to be applicable
       (crate-content ?crate ?cratetype) ;; crate must have the content need for action to be applicable
       (heli-free ?heli)  ;; helicopter must be free for it to be able to pickup a crate
       ;; specifying type predicate
       (uav ?heli)
       (content ?cratetype)
       (crate ?crate)
       (location ?loc)
  )
  ;; Delete effects
  ((at ?crate ?loc) ;; remove assocation between crate and location as it has been pickedup
   (heli-free ?heli)   ;; make helicopter not free as it has pickedup a crate
  )
  ;; Add effects
  ((in ?heli ?crate)) ;; make crate assocaited with helicopter
  )


  (:operator (!fly-to ?heli ?from ?to)
	  ;; Precondition
	  (and (at ?heli ?from) ;; check if heli is in correct location
         ;; specifying type predicates
         (uav ?heli)
         (location ?from)
         (location ?to)
    )
	  ;; Delete effects
	  ( (at ?heli ?from)  ;; remove helicopter from current location
    )
	  ;; Add effects
	  ( (at ?heli ?to))  ;; make helicopter move to new location
	)

  (:operator (!deliver-crate ?heli ?person ?cratetype ?loc)
	  ;; Precondition
	  (and (at ?heli ?loc) ;; check if heli is in correct location
         (at ?person ?loc) ;; check if person is in correct location
         (crate-content ?crate ?cratetype) ;; check if content assocaited with crate
         (in ?heli ?crate) ;; check if crate in helicopter
         ;; specifying type predicates
         (uav ?heli)
         (location ?loc)
         (crate ?crate)
         (content ?cratetype)
         (person ?person)
    )
	  ;; Delete effects
	  ( (in ?heli ?crate)  ;; remove crate from helicopter
         (needs ?person ?cratetype) ;; removed need as person has got the crate
    )
	  ;; Add effects
	  ( (heli-free ?heli) ;; make helicopter move to new location
         (has ?person ?cratetype) ;; associate crate with person
    )
	)

  (:method (deliver-all)
    ;; Preconditions
    (needs ?person ?cratetype)
    ;; task list
    (
      (pickup-crate ?heli ?food ?depot)
      ;;(pickup ?heli ?crate)
      ;;(deliver-all)
    )
    ;; Preconditions
    ()
    ;; Task list
    ()
   )

)

)
