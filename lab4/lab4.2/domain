(defdomain domain (
  ;; PRIMITIVE TASK - to pick up a crate of sepcific type using an UAV
  (:operator (!pickup-crate ?heli ?cratetype ?loc)
  ;; Precondition
  (and (at ?heli ?loc)
       (at ?crate ?loc) ;; helicopter and crate must be in same location for task to be applicable
       (crate-content ?crate ?cratetype) ;; crate must have the content need for action to be applicable
       (heli-free ?heli)  ;; helicopter must be free for it to be able to pickup a crate
       ;; specifying type predicate
       (uav ?heli)
       (content ?cratetype)
       (crate ?crate)
       (location ?loc)
  )
  ;; Delete effects
  ((at ?crate ?loc) ;; remove assocation between crate and location as it has been pickedup
   (heli-free ?heli)   ;; make helicopter not free as it has pickedup a crate
  )
  ;; Add effects
  ((in ?heli ?crate)) ;; make crate assocaited with helicopter
  )

  ;; PRIMITIVE TASK - fly uav from one location to another
  (:operator (!fly-to ?heli ?from ?to)
	  ;; Precondition
	  (and (at ?heli ?from) ;; check if heli is in correct location
         ;; specifying type predicates
         (uav ?heli)
         (location ?from)
         (location ?to)
    )
	  ;; Delete effects
	  ( (at ?heli ?from)  ;; remove helicopter from current location
    )
	  ;; Add effects
	  ( (at ?heli ?to))  ;; make helicopter move to new location
	)

  ;; PRIMITIVE TASK - to deliver a crate of particular type to a person
  (:operator (!deliver-crate ?heli ?person ?cratetype ?loc)
	  ;; Precondition
	  (and (at ?heli ?loc) ;; check if heli is in correct location
         (at ?person ?loc) ;; check if person is in correct location
         (crate-content ?crate ?cratetype) ;; check if content associated with crate
         (in ?heli ?crate) ;; check if crate in helicopter
         ;; specifying type predicates
         (uav ?heli)
         (location ?loc)
         (crate ?crate)
         (content ?cratetype)
         (person ?person)
    )
	  ;; Delete effects
	  ( (in ?heli ?crate)  ;; remove crate from helicopter
         (needs ?person ?cratetype) ;; removed need as person has got the crate
    )
	  ;; Add effects
	  ( (heli-free ?heli) ;; make helicopter free
         (has ?person ?cratetype) ;; associate crate with person
    )
	)

  ;; Initial task
  (:method (deliver-all)
    ;; Preconditions
    (needs ?person ?cratetype)
    ;; task list
    (
      (pickup ?cratetype)
      (deliver ?person ?cratetype)
      (deliver-all)
    )
    ;; Preconditions
    ()
    ;; Task list
    ()
   )

   ;; METHORD : Pickup a crate using a uav when a uav is in the same location as crate or in differnt location
   (:method (pickup ?cratetype)
     ;; Precondition 1 check if heli and crate are in same location
     (and (crate-content ?crate ?cratetype) ;; find crate associated with content
          (at ?heli ?loc)
          (at ?crate ?loc) ;; helicopter and crate must be in same location for task to be applicable
          ;; specifying type predicates
          (uav ?heli)
          (location ?loc)
          (crate ?crate)
          (content ?cratetype)
     )
     ;; task list 1 - pickup crate if heli and crates are in same location
     (
      (!pickup-crate ?heli ?cratetype ?loc)
     )

     ;; Precondition 2 if heli and crate not in same location then fly a free heli and then pickup crate
     (and (crate-content ?crate ?cratetype) ;; find crate associated with content
          (at ?heli ?loc1)  ;; get location of heli
          (at ?crate ?loc2) ;; get location of crate
          (heli-free ?heli) ;; check if heli is free no point in flying an non free heli
          ;; specifying type predicates
          (uav ?heli)
          (location ?loc1)
          (location ?loc2)
          (crate ?crate)
          (content ?cratetype)
     )
     ;; task list 2 - fly heli to crate location and then pick it up
     (
      (!fly-to ?heli ?loc1 ?loc2)
      (!pickup-crate ?heli ?cratetype ?loc2)
     )
    )

    ;; METHORD - deliver a crate to person when the uav has the required crate and the heli and peron are in same or differnt location
    (:method (deliver ?person ?cratetype)
      ;; Preconditions 1 if heli with required cratetype and person at same location then call the primitive task deliver-crate
      (and (needs ?person ?cratetype) ; find the cratetype the person needs
           (at ?heli ?loc)
           (at ?person ?loc)  ; check if person and heli at the same location
           (crate-content ?crate ?cratetype) ;; check if content associated with crate is the required one
           (in ?heli ?crate) ;; check if crate is in helicopter
           ;; specifying type predicates
           (uav ?heli)
           (location ?loc)
           (crate ?crate)
           (content ?cratetype)
           (person ?person)
      )
      ;; task list - deliver crate if uav and person in same location
      (
        (!deliver-crate ?heli ?person ?cratetype ?loc)
      )
      ;; Preconditions 2 check if heli has the required crate type and if person and heli in diffent locations
      ;; Then call fly to persons locations and then the deliver crate action
      (and (needs ?person ?cratetype) ; find the cratetype the person needs
           (in ?heli ?crate) ;; check if crate is in helicopter
           (crate-content ?crate ?cratetype) ;; check if content associated with crate is the required one
           (at ?heli ?loc1)  ;; get the location of heli
           (at ?person ?loc2) ;; get the location of person that requires the crate
           ;; specifying type predicates
           (uav ?heli)
           (location ?loc1)
           (location ?loc2)
           (crate ?crate)
           (content ?cratetype)
           (person ?person)
      )
      ;; Task list 2 - fly uav to person's location and then deliver crate
      (
        (!fly-to ?heli ?loc1 ?loc2)
        (!deliver-crate ?heli ?person ?cratetype ?loc2)
      )
     )

)

)
